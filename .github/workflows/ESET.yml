name: ESET Key Generator

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      account:
        description: 'Number of Accounts to be generated (default = 0)'
        required: false
        default: '0'
      key:
        description: 'Number of Keys to be generated (default = 1)'
        required: false
        default: '1'
      mail:
        description: 'Choose the mail provider to generate license'
        required: true
        type: choice
        options:
        - 1secmail
        - guerrillamail
        - developermail
        - mailticking
        - fakemail
        - inboxes
        - incognitomail
        default: fakemail
      key_type:
        description: 'Operation'
        required: true
        type: choice
        options:
        - --key
        - --small-business-key
        - --vpn-codes
        default: --vpn-codes
      branch:
        description: "Key-Gen Repository branch (default = main)"
        required: false
        default: 'main'
  schedule:
    - cron: '0 */6 * * *' 

jobs:
  generate-and-commit:
    runs-on: ubuntu-latest
    env:
      DEFAULT_ACCOUNT: '0'
      DEFAULT_KEY: '1'
      DEFAULT_MAIL: 'fakemail'
      DEFAULT_KEY_TYPE: '--vpn-codes'
      DEFAULT_BRANCH: 'main'
      OUTPUT_FILENAME: 'ESET-CODES.md'
      TEMP_OUTPUT_FILE: 'key_gen_output.log'

    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v4

      - name: Generate Keys
        run: |
          # Determine parameters
          ACCOUNT=${{ github.event.inputs.account || env.DEFAULT_ACCOUNT }}
          KEY=${{ github.event.inputs.key || env.DEFAULT_KEY }}
          MAIL=${{ github.event.inputs.mail || env.DEFAULT_MAIL }}
          KEY_TYPE=${{ github.event.inputs.key_type || env.DEFAULT_KEY_TYPE }}
          BRANCH=${{ github.event.inputs.branch || env.DEFAULT_BRANCH }}
          OUTPUT_FILE="${{ env.OUTPUT_FILENAME }}"
          TEMP_OUTPUT="${{ env.TEMP_OUTPUT_FILE }}"

          echo "--- Configuration ---"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Account Count: $ACCOUNT"
          echo "Key Count: $KEY"
          echo "Mail Provider: $MAIL"
          echo "Key Type: $KEY_TYPE"
          echo "Key-Gen Branch: $BRANCH"
          echo "Output File: $OUTPUT_FILE"
          echo "Temp Output File: $TEMP_OUTPUT"
          echo "---------------------"

          # Delete old temp file if exists
          rm -f "$TEMP_OUTPUT"

          # Clone the Key-Gen repository
          echo "Cloning Key-Gen repository..."
          git clone -b ${BRANCH} https://github.com/Diana-Cl/Key-Gen.git key-gen-repo
          cd key-gen-repo

          # Setup Python environment
          echo "Setting up Python environment..."
          sudo apt-get update -y > /dev/null # Suppress apt output
          sudo apt-get install -y python3-pip python3-venv > /dev/null # Suppress apt output
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt > /dev/null # Suppress pip output
          echo "Python environment setup complete."

          # Generate Accounts and/or Keys and capture output to temp file
          echo "Generating accounts/keys and capturing output..."
          if [[ ${ACCOUNT} -ne 0 ]]; then
            echo "Generating $ACCOUNT accounts..."
            python3 main.py --auto-detect-browser --account --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${ACCOUNT} | tee "../$TEMP_OUTPUT"
          fi
          if [[ ${KEY} -ne 0 ]]; then
            echo "Generating $KEY keys (type: $KEY_TYPE)..."
            APPEND_FLAG=""
            if [[ -f "../$TEMP_OUTPUT" ]]; then
              APPEND_FLAG="-a" # Use append if account generation already wrote to the file
            fi
            python3 main.py --auto-detect-browser ${KEY_TYPE} --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${KEY} | tee $APPEND_FLAG "../$TEMP_OUTPUT"
          fi
          echo "Generation commands executed. Output captured in ../$TEMP_OUTPUT"

          # Go back to the main repository root
          cd ..

          # --- Extract values and format Markdown for NEW entry ---
          echo "Extracting data and formatting Markdown for the new entry..."

          # Extract individual values from the temporary file
          # Ensure grep returns empty string if pattern not found, not an error
          VPN_CODES_LIST=$(grep '^VPN Codes:' "$TEMP_OUTPUT" | sed 's/^VPN Codes: //' || true)
          LICENSE_NAME=$(grep '^License Name:' "$TEMP_OUTPUT" | sed 's/^License Name: //' || true)
          LICENSE_KEY=$(grep '^License Key:' "$TEMP_OUTPUT" | sed 's/^License Key: //' || true)
          LICENSE_OUT_DATE=$(grep '^License Out Date:' "$TEMP_OUTPUT" | sed 's/^License Out Date: //' || true)
          ACCOUNT_EMAIL=$(grep '^Account Email:' "$TEMP_OUTPUT" | sed 's/^Account Email: //' || true)
          ACCOUNT_PASSWORD=$(grep '^Account Password:' "$TEMP_OUTPUT" | sed 's/^Account Password: //' || true)

          # Prepare the content for THIS run in a temporary file
          NEW_ENTRY_FILE="new_entry.md.tmp"
          # Use the desired date format
          CURRENT_DATETIME_UTC=$(date -u '+%A, %d %B %Y, %H:%M:%S UTC')

          # Start building the new entry
          {
            echo "# Generated ON: ${CURRENT_DATETIME_UTC}"
            echo "" # Blank line
            echo "> [!CAUTION]"
            echo "> Triggered by: ${{ github.event_name }}"
            echo "" # Blank line
            echo "<br><br>" # Extra spacing like the example
            echo "" # Blank line
          } > "$NEW_ENTRY_FILE" # Overwrite or create the temp file

          # 1. Add VPN Codes Section (if VPN codes exist)
          if [[ -n "$VPN_CODES_LIST" ]]; then
            {
              echo "### ESET VPN ACCESS CODES"
              echo ""
              # Update Note: Changed expiration mention based on user feedback (although the 12hr mention was in the original *example*)
              # Kept the original note for consistency with the desired output format, user can adjust if needed.
              echo "> [!NOTE]"
              echo "> The access codes for ESET VPN will expire eventually." # Changed from 12 hours
              echo "> Each code is valid for login on only one device."
              echo ""
              echo '```ruby'
              # Convert comma-space separated list to one code per line
              echo "$VPN_CODES_LIST" | sed 's/, /\n/g'
              echo '```'
              echo ""
              echo "<br>" # Extra spacing
              echo ""
            } >> "$NEW_ENTRY_FILE" # Append to the temp file
          fi

          # 2. Add ESET Security License Section (if License Key exists)
          if [[ -n "$LICENSE_KEY" ]]; then
            {
              echo "### ESET SECURITY LICENSE"
              echo ""
              echo "**Name:** ${LICENSE_NAME:-N/A}" # Use N/A if name is missing
              echo "**Expiry:** ${LICENSE_OUT_DATE:-N/A}" # Use N/A if date is missing
              echo "**License Key:**"
              echo ""
              echo '```POV-Ray SDL'
              echo "$LICENSE_KEY"
              echo '```'
              echo ""
              echo "<br>" # Extra spacing
              echo ""
            } >> "$NEW_ENTRY_FILE"
          fi

          # 3. Add ESET Account Section (if Account Email exists)
          if [[ -n "$ACCOUNT_EMAIL" ]]; then
            {
              echo "### ESET ACCOUNT"
              echo ""
              echo "**Email:**"
              echo ""
              echo '```CSS'
              echo "$ACCOUNT_EMAIL"
              echo '```'
              echo ""
              echo "**Password:**"
              echo ""
              echo '```POV-Ray SDL'
              if [[ -n "$ACCOUNT_PASSWORD" ]]; then
                echo "$ACCOUNT_PASSWORD"
              else
                echo "N/A" # Handle missing password
              fi
              echo '```'
              echo ""
              echo "<br>" # Extra spacing
              echo ""
            } >> "$NEW_ENTRY_FILE"
          fi

          # 4. Add Static Footer Link Section
          {
            echo "### All about ESET VPN"
            echo ""
            echo "[READ HERE](https://t.me/F_NiREvil/2113)"
            echo ""
            echo "---" # Separator for the end of this entry
            echo ""
            echo "<br><br>" # Final spacing before potential next entry
            echo ""
          } >> "$NEW_ENTRY_FILE"

          echo "Markdown formatting complete for the new entry in $NEW_ENTRY_FILE."

          # --- Combine with previous content or Reset (Every 24 Hours at 00:00 UTC) ---
          echo "Determining whether to prepend or overwrite..."
          CURRENT_HOUR_UTC=$(date -u +'%H')
          SHOULD_RESET=false

          # Reset (overwrite) only at 00:00 UTC for scheduled runs
          # This implements the 24-hour reset cycle.
          if [[ "${{ github.event_name }}" == "schedule" ]] && [[ "$CURRENT_HOUR_UTC" == "00" ]]; then
              echo "Scheduled run at UTC hour 00. Resetting ${OUTPUT_FILE} (24-hour cycle)."
              SHOULD_RESET=true
          fi

          if [[ "$SHOULD_RESET" == "true" ]] || [[ ! -f "$OUTPUT_FILE" ]]; then
              # Overwrite if resetting or if the main file doesn't exist
              echo "Overwriting ${OUTPUT_FILE} with the new entry."
              mv "$NEW_ENTRY_FILE" "$OUTPUT_FILE"
          else
              # Prepend: Combine new entry + old content
              echo "Prepending the new entry to ${OUTPUT_FILE}."
              TEMP_COMBINED_FILE="combined.md.tmp"
              # Write new entry first, then append old file content
              cat "$NEW_ENTRY_FILE" "$OUTPUT_FILE" > "$TEMP_COMBINED_FILE"
              # Replace the old file with the combined content
              mv "$TEMP_COMBINED_FILE" "$OUTPUT_FILE"
              # Clean up the separate new entry file as it's now part of the combined file
              rm "$NEW_ENTRY_FILE"
          fi

          # Optional: Clean up the raw output temporary file from the script execution
          # rm -f "$TEMP_OUTPUT" # Uncomment if you want to remove the log file

          echo "File update complete for ${OUTPUT_FILE}."
          echo "Final content of ${OUTPUT_FILE}:"
          # Use head to avoid printing potentially very large files to the logs
          head -n 100 "${OUTPUT_FILE}"


      - name: Commit and Push Generated Keys
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat: Update ESET generated keys/accounts (${{ github.event_name }})"
          file_pattern: ${{ env.OUTPUT_FILENAME }}
          commit_user_name: "ESET Security Bot" 
          commit_user_email: "pr@eset.com" 
          commit_options: '--signoff'
          # push_options: '--force' # Avoid using --force unless absolutely necessar
